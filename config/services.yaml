# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    mailer_from: '%env(MAILER_FROM)%'
    mailer_host: '%env(MAILER_HOST)%'
    mailer_port: '%env(MAILER_PORT)%'
    mailer_username: '%env(MAILER_USERNAME)%'
    mailer_password: '%env(MAILER_PASSWORD)%'
    mailer_debug_mode: '%env(MAILER_DEBUG_MODE)%'
    admin_mail: '%env(ADMIN_MAIL)%'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'
            - '../src/Tests/'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller/'
        tags: ['controller.service_arguments']
    App\Controller\Api\:
        resource: '../src/Controller/Api'
        tags: ['controller.service_arguments']

    # Services
    App\Service\Emails\PHPMailerService:
        arguments:
            $from: '%mailer_from%'
            $host: '%mailer_host%'
            $port: '%mailer_port%'
            $username: '%mailer_username%'
            $password: '%mailer_password%'
            $debug_mode: '%mailer_debug_mode%'
            $logger: '@logger'

    App\Service\UserService:
        arguments:
            $manager: '@doctrine.orm.entity_manager'

    App\Service\MessageService:
        arguments:
            $manager: '@doctrine.orm.entity_manager'

    # Event Listeners
    App\EventListener\ListPublisher:
        tags:
            - { name: doctrine.event_listener, event: postPersist }
    App\EventListener\ListUnpublisher:
        tags:
            - { name: doctrine.event_listener, event: postRemove }

    # Commands
    app.create_user_admin:
        class: App\Command\UserAdminCreateCommand
        arguments: ['@doctrine.orm.entity_manager', '@security.user_password_encoder.generic']
        tags:
            - { name: console.command }

    app.create_user_test:
        class: App\Command\UserTestCreateCommand
        arguments: ['@doctrine.orm.entity_manager', '@security.user_password_encoder.generic']
        tags:
            - { name: console.command }

    app.reset_password:
        class: App\Command\ResetPasswordCommand
        arguments:
            $entityManager: '@doctrine.orm.entity_manager'
            $encoder: '@security.user_password_encoder.generic'

